function [Data_3D_KNN Data_3D_align mean_pose_3D mean_pose_ppca Cov_pPCA eignValues eignVectors]=Estimation_Model(RawData3D,Threshold_Eigen)
%this function receives data including missing data and outliers. estimate
%the robust covariance matrix and return the covariance matrix and eigenpose
%and eigenvalues
%%%%
[Np,Framedim,Ns] = size(RawData3D);
mean_pose_3D = Estimate_mean_RANSAC(RawData3D, false);
%%%%%%%
%alignment
Data_3D_align = Alignment(RawData3D, mean_pose_3D);
%%%%%%%
%Filling data with KNN=5
K = 5;
Data_3D_KNN = Near_NaN_Euclidian(Data_3D_align, K, false);
Data_3D_KNN_P=Data_3D_KNN ;
% Data_KNN_reshape=reshape(Data_3D_KNN, Np*Framedim,Ns);
%%%%%%%
%PPCA
[mean_pose_ppca, ~, Cov_pPCA, eignValues, eignVectors] = pPCA(Data_3D_KNN,Threshold_Eigen,true);



%animated video
T = 100;
figure; 
h = subplot(1,1,1); hold on;
for n = 1:3
    for m = 1:T
        pose = mean_pose_ppca + 3*sqrt(eignValues(n))*eignVectors(:,n)*sin(2*pi*m/(0.5*T));   
        pose_2D = reshape(pose,[2,Nbp,1])';
        plot(pose_2D(:,1),pose_2D(:,2),'r.','MarkerSize',18);
        xlim([-120 120]); ylim([-120 120]);
        title([which_part ' eigpose ' num2str(n)])
        drawnow; pause(0.05);
        cla;
    end

end
